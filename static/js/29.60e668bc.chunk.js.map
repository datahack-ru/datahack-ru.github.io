{"version":3,"sources":["pages/MyReferrals/components/ReferralLink/ReferralLink.tsx","pages/MyReferrals/index.ts","utils/getExternalLinkProps.ts","components/Footer/Footer.tsx","components/Header.tsx","components/ScrollToTop.tsx","components/Page.tsx","components/Number.tsx","pages/MyReferrals/MyReferrals.tsx"],"names":["ReferralLink","t","useTranslation","myRefId","useSelector","S","getGuid","referralLink","window","location","hostname","className","placeholder","onClick","copy","src","inline","getExternalLinkProps","target","rel","BlockIcons","href","Image","Footer","isMobile","useMediaPredicate","mobileBreakpoint","i18n","getAdaptiveClassName","Container","Grid","columns","stackable","padded","Column","List","link","Item","as","Link","to","Routes","bscFarm","ethFarm","exchange","bridge","cupToken","nft","language","horizontal","year","Date","getFullYear","MenuItems","Menu","header","NavLink","farming","exact","cosmovirtual","MenuProfile","dispatch","useDispatch","isAuthenticated","dashboard","Dropdown","Divider","A","signOut","signin","signup","langOptions","key","value","text","Header","useState","isMenuOpen","setMenuOpen","toggleMenu","changeLanguage","e","se","fixed","size","main","spaced","position","name","pointing","options","onChange","Sidebar","animation","inverted","onHide","vertical","visible","ScrollToTop","useLocation","visibilityButton","setVisibilityButton","useEffect","goTop","scroll","top","left","behavior","onscroll","height","scrollY","Page","title","children","isEmpty","Helmet","lang","charSet","Number","props","rest","displayType","defaultValue","thousandSeparator","farmingStatisticsInitData","guid","address","level","nfts","staked","stakedUsd","balance","poolRef","earned","earnedToday","referrals","poolTime","days","poolTeam","members","weakTeam","poolPersonal","hot","module","state","fStats","setFStats","updateFStats","a","api","getV2AllData","res","ok","result","claimCclp","getV2ClaimCclp","alert","error","message","content","style","color","celled","Row","HeaderCell","colSpan","Body","Cell","suffix","decimalScale"],"mappings":"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","file":"static/js/29.60e668bc.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Input, Image } from \"semantic-ui-react\";\nimport copy from 'copy-to-clipboard';\nimport * as S from '../../../../store/selectors';\nimport \"./ReferralLink.scss\";\n\n\n\nconst ReferralLink: React.FC = () => {\n  const { t } = useTranslation();\n  const myRefId: any = useSelector(S.profile.getGuid);\n  const referralLink = `https://${window.location.hostname}/?r=${myRefId}`;\n\n  return (\n    <div className=\"referral-link__wrapper\">\n      <div className=\"referral-link\">\n        <label>{t('My Referral link')}</label>\n        <div className=\"referral-link__form\">\n          <Input placeholder={referralLink} onClick={() => copy(referralLink)}/>\n          <Button onClick={() => copy(referralLink)}>\n            <Image src=\"/icons/referral.png\" inline />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReferralLink;\n","export { default } from \"./MyReferrals\";\n","const getExternalLinkProps = (): { target: string; rel: string } => ({\n  target: '_blank',\n  rel: 'noreferrer noopener',\n});\n\nexport default getExternalLinkProps;\n","import React from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { Link } from \"react-router-dom\";\nimport { Routes } from \"../../router/helper\";\nimport { Grid, Image, Container, List } from \"semantic-ui-react\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport { getAdaptiveClassName, mobileBreakpoint } from \"../../helpers/Media\";\nimport getExternalLinkProps from '../../utils/getExternalLinkProps';\n\nimport \"./Footer.scss\";\n\n\n\nconst BlockIcons: React.FC = () => (\n  <>\n    <a\n      href=\"https://t.me/CosmoFundChannel\"\n      {...getExternalLinkProps()}\n    >\n      <Image src=\"/icons/telegram.png\" inline />\n    </a>\n    <a\n      href=\"https://twitter.com/CosmoFund\"\n      {...getExternalLinkProps()}\n    >\n      <Image src=\"/icons/twitter.png\" inline />\n    </a>\n    <a\n      href=\"https://medium.com/@CosmoFund\"\n      {...getExternalLinkProps()}\n    >\n      <Image src=\"/icons/medium.png\" inline />\n    </a>\n  </>\n);\n\n\n\nconst Footer: React.FC = () => {\n  const isMobile = useMediaPredicate(mobileBreakpoint);\n  const { i18n, t } = useTranslation();\n\n  return (\n    <footer className={getAdaptiveClassName(\"footer\", isMobile)}>\n      <div className=\"footer__bg\">\n        <Container>\n          <div className=\"footer__icons\">\n            <BlockIcons />\n          </div>\n\n          <div className=\"footer__links\">\n            <Grid columns={5} stackable padded>\n              {/*\n              <Grid.Column>\n                <b>{t('My Menu')}</b>\n                <List link>\n                  <List.Item\n                    as={Link}\n                    to={Routes.dashboard}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('My Dashboard')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.team}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('My Team')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.wallet}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('My Wallet')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.profile}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('My Profile')}\n                  </List.Item>\n                </List>\n              </Grid.Column>\n              */}\n              <Grid.Column>\n                <b>{t('Farms')}</b>\n                <List link>\n                  <List.Item\n                    as={Link}\n                    to={Routes.bscFarm}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Binance Farms')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.ethFarm}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Ethereum Farms')}\n                  </List.Item>\n                </List>\n              </Grid.Column>\n\n              <Grid.Column>\n                <b>{t('Services')}</b>\n                <List link>\n                  <List.Item\n                    as={Link}\n                    to={Routes.exchange}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Exchange')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.bridge}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Cross-chain Bridge')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.cupToken}\n                    {...getExternalLinkProps()}\n                  >\n                    Cosmo Universal Power (CUP)\n                  </List.Item>\n                </List>\n              </Grid.Column>\n\n              <Grid.Column>\n                <b>CosmoFund NFTs</b>\n                <List link>\n                  <List.Item\n                    as={'a'}\n                    href={'https://opensea.io/assets/cosmomasks-main-collection'}\n                    {...getExternalLinkProps()}\n                  >\n                    CosmoMasks\n                  </List.Item>\n                  {/*<List.Item\n                    as={'a'}\n                    href={'https://opensea.io/assets/cosmomasks-limited-pack'}\n                    {...getExternalLinkProps()}\n                  >\n                    CosmoMasks Limited Pack\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={'https://opensea.io/assets/maskformusk'}\n                    {...getExternalLinkProps()}\n                  >\n                    MaskForMusk\n                  </List.Item>*/}\n                  <List.Item\n                    as={'a'}\n                    href={'https://opensea.io/assets/cosmobugs'}\n                    {...getExternalLinkProps()}\n                  >\n                    CosmoBugs\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={'https://opensea.io/collection/cosmodoodle'}\n                    {...getExternalLinkProps()}\n                  >\n                    CosmoDoodle\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={'https://opensea.io/collection/cosmoart'}\n                    {...getExternalLinkProps()}\n                  >\n                    CosmoArt\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={Routes.nft}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('More')}...\n                  </List.Item>\n                </List>\n              </Grid.Column>\n\n              <Grid.Column>\n                <b>{t('Info')}</b>\n                <List link>\n                  <List.Item\n                    as={Link}\n                    to={'#'}\n                  //to={Routes.about}\n                  //{...getExternalLinkProps()}\n                  >\n                    {t('About')}\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={'/cosmofund_whitepaper.pdf'}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Whitepaper')}\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={\"/\" + i18n.language + \"/cosmofund_roadmap.pdf\"}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Roadmap')}\n                  </List.Item>\n                  <List.Item\n                    as={'a'}\n                    href={\"/cosmofund_marketing_plan.pdf\"}\n                    {...getExternalLinkProps()}\n                  >\n                    {t('Marketing plan')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={'#'}\n                  //to={Routes.tokenomics}\n                  //{...getExternalLinkProps()}\n                  >\n                    {t('Tokenomics')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={'#'}\n                  //to={Routes.faq}\n                  //{...getExternalLinkProps()}\n                  >\n                    {t('FAQ')}\n                  </List.Item>\n                  <List.Item\n                    as={Link}\n                    to={'#'}\n                  //to={Routes.contracts}\n                  //{...getExternalLinkProps()}\n                  >\n                    {t('Smart Contracts')}\n                  </List.Item>\n                </List>\n              </Grid.Column>\n            </Grid>\n          </div>\n\n          <div className=\"footer__banner\">\n            <div className=\"footer__copyright\">\n              <List link horizontal={!isMobile}>\n                <List.Item\n                  as={'a'}\n                  href={'https://cosmofund.space/'}\n                  {...getExternalLinkProps()}\n                >\n                  {t('copyright', { year: new Date().getFullYear() })}{\"\\u00A0 \"}\n                </List.Item>\n              </List>\n\n              <List link horizontal={!isMobile}>\n                <List.Item\n                  as={Link}\n                  to={'#'}\n                //to={Routes.terms}\n                //{...getExternalLinkProps()}\n                >\n                  {t('Terms and Conditions')}\n                </List.Item>\n                <List.Item\n                  as={Link}\n                  to={'#'}\n                //to={Routes.privacy}\n                //{...getExternalLinkProps()}\n                >\n                  {t('Privacy Policy')}\n                </List.Item>\n                <List.Item\n                  as={'a'}\n                  href='mailto:support@cosmofund.space'\n                  {...getExternalLinkProps()}\n                >\n                  {t('Contact Us')}\n                </List.Item>\n                <List.Item\n                  as={Link}\n                  to={'#'}\n                //to={Routes.disclaimer}\n                //{...getExternalLinkProps()}\n                >\n                  {t('Disclaimer')}\n                </List.Item>\n              </List>\n            </div>\n          </div>\n        </Container>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from \"react-i18next\";\nimport { Container, Menu, Image, Sidebar, Dropdown, Label } from \"semantic-ui-react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport { mobileBreakpoint, getAdaptiveClassName } from \"../helpers/Media\";\nimport { Routes } from \"../router/helper\";\nimport * as S from \"../store/selectors\";\nimport * as A from \"../store/actions\";\n\n\n\nconst MenuItems: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Menu.Item header as={NavLink} to={Routes.nft}>\n        NFT\n      </Menu.Item>\n      <Menu.Item header as={NavLink} to={Routes.farming}>\n        {t(\"Farming\")}\n      </Menu.Item>\n      <Menu.Item header as={NavLink} exact to={Routes.exchange}>\n        {t(\"Exchange\")}\n      </Menu.Item>\n      <Menu.Item header as={NavLink} to={Routes.bridge}>\n        {t(\"Bridge\")}\n      </Menu.Item>\n      <Menu.Item header as={NavLink} to={Routes.cupToken}>\n        CUP\n      </Menu.Item>\n      <Menu.Item header as={NavLink} to={Routes.cosmovirtual}>\n        CosmoVirtual\n      </Menu.Item>\n\n    </>\n  );\n};\n\nconst MenuProfile: React.FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const isAuthenticated = useSelector(S.profile.isAuthenticated);\n\n  const signOut = () => {\n    dispatch(A.profile.signOut());\n  };\n\n  if (isAuthenticated) {\n    return (\n      <>\n        {/*<Dropdown.Item as={Link} to={Routes.profile}>\n          {t(\"My Profile\")}\n        </Dropdown.Item>\n        <Dropdown.Item as={Link} to={Routes.wallet}>\n          {t(\"My Wallet\")}\n        </Dropdown.Item>\n        <Dropdown.Item as={Link} to={Routes.team}>\n          {t(\"My Team\")}\n        </Dropdown.Item>\n        <Dropdown.Item as={Link} exact to={Routes.MyReferrals}>\n          {t('Referral program')}\n        </Dropdown.Item>\n        */}\n        <Menu.Item header as={Link} exact to={Routes.dashboard}>\n          {t('Dashboard')}\n        </Menu.Item>\n\n        <Dropdown.Divider />\n        <Dropdown.Item as='a' onClick={signOut}>{t('Sign Out')}</Dropdown.Item>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Menu.Item header as={Link} to={Routes.signin}>\n          {t(\"Sign In\")}\n        </Menu.Item>\n        <Menu.Item header as={Link} to={Routes.signup}>\n          {t(\"Sign Up\")}\n        </Menu.Item>\n      </>\n    );\n  }\n};\n\nexport const langOptions = [\n  { key: \"en\", value: \"en\", text: \"EN\" },\n  { key: \"cn\", value: \"cn\", text: \"CN\" },\n  { key: \"ru\", value: \"ru\", text: \"RU\" },\n];\n\nconst Header: React.FC = () => {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const isMobile = useMediaPredicate(mobileBreakpoint);\n  const { i18n, t } = useTranslation();\n  const isAuthenticated = useSelector(S.profile.isAuthenticated);\n\n  const toggleMenu = () => {\n    setMenuOpen(!isMenuOpen);\n  };\n\n  const changeLanguage = (e: any, se: any) => {\n    i18n.changeLanguage(se.value);\n  };\n  //<div style={{ color: '#ffae00' }}>{t(\"projectTitle\")}</div>\n\n  if (isAuthenticated)\n    return (\n      <>\n        <Menu\n          fixed=\"top\"\n          size=\"large\"\n          className={getAdaptiveClassName(\"main-menu\", isMobile)}\n        >\n          <Container>\n            <Menu.Item header as={Link} to={Routes.main} className=\"logo\">\n              <Image src=\"/images/layout/logo.png\" spaced=\"right\" />\n              {t(\"projectTitle\")}\n            </Menu.Item>\n\n            {isMobile ? (\n              <Menu.Item onClick={toggleMenu} position=\"right\">\n                <Dropdown\n                  name=\"lang\"\n                  pointing\n                  className=\"link item\"\n                  options={langOptions}\n                  value={i18n.language}\n                  onChange={changeLanguage}\n                />\n                <Image src=\"/icons/menu.png\" inline />\n              </Menu.Item>\n            ) : (\n              <>\n                <MenuItems />\n                <Menu.Menu position=\"right\">\n                  <Dropdown text={t(\"Profile\")} pointing className=\"link item\">\n                    <Dropdown.Menu>\n                      <MenuProfile />\n                    </Dropdown.Menu>\n                  </Dropdown>\n\n                  <Dropdown\n                    name=\"lang\"\n                    pointing\n                    className=\"link item\"\n                    options={langOptions}\n                    value={i18n.language}\n                    onChange={changeLanguage}\n                  />\n                </Menu.Menu>\n              </>\n            )}\n          </Container>\n        </Menu>\n\n        {isMobile && (\n          <Sidebar\n            as={Menu}\n            animation=\"overlay\"\n            inverted\n            onHide={() => setMenuOpen(false)}\n            vertical\n            visible={isMenuOpen}\n          >\n            <MenuItems />\n            <MenuProfile />\n          </Sidebar>\n        )}\n      </>\n    );\n  else\n    return (\n      <>\n        <Menu\n          fixed=\"top\"\n          size=\"large\"\n          className={getAdaptiveClassName(\"main-menu\", isMobile)}\n        >\n          <Container>\n            <Menu.Item header as={Link} to={Routes.main} className=\"logo\">\n              <Image src=\"/images/layout/logo.png\" spaced=\"right\" />\n              {t(\"projectTitle\")}\n            </Menu.Item>\n\n            {isMobile ? (\n              <Menu.Item onClick={toggleMenu} position=\"right\">\n                <Dropdown\n                  name=\"lang\"\n                  pointing\n                  className=\"link item\"\n                  options={langOptions}\n                  value={i18n.language}\n                  onChange={changeLanguage}\n                />\n                <Image src=\"/icons/menu.png\" inline />\n              </Menu.Item>\n            ) : (\n              <>\n                <MenuItems />\n                <Menu.Menu position=\"right\">\n                  <Menu.Item header as={Link} to={Routes.signin}>\n                    {t(\"Sign In\")}\n                  </Menu.Item>\n                  {/*<Menu.Item header as={Link} to={Routes.signup}>\n                    {t(\"Sign Up\")}\n                  </Menu.Item>*/}\n\n                  <Dropdown\n                    name=\"lang\"\n                    pointing\n                    className=\"link item\"\n                    options={langOptions}\n                    value={i18n.language}\n                    onChange={changeLanguage}\n                  />\n                </Menu.Menu>\n              </>\n            )}\n          </Container>\n        </Menu>\n\n        {isMobile && (\n          <Sidebar\n            as={Menu}\n            animation=\"overlay\"\n            inverted\n            onHide={() => setMenuOpen(false)}\n            vertical\n            visible={isMenuOpen}\n          >\n            <MenuItems />\n            <MenuProfile />\n          </Sidebar>\n        )}\n      </>\n    );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { Image } from \"semantic-ui-react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop: React.FC = () => {\n  const location = useLocation();\n  const [visibilityButton, setVisibilityButton] = useState(false);\n\n  useEffect(() => {\n    goTop();\n  }, [location]);\n\n  const goTop = () => {\n    window.scroll({\n      top: 0,\n      left: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  window.onscroll = () => {\n    const height = window.scrollY;\n    if (height > 600) {\n      setVisibilityButton(true);\n    } else {\n      setVisibilityButton(false);\n    }\n  };\n\n  return visibilityButton ? (\n    <Image src=\"/images/layout/top.png\" onClick={goTop} className=\"scrollTop\" />\n  ) : null;\n};\n\nexport default ScrollToTop;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport Footer from '../components/Footer/Footer';\nimport Header from '../components/Header';\nimport ScrollToTop from './ScrollToTop';\n\n\n\ninterface IPageProps {\n  title: string;\n  description?: string;\n  isEmpty?: boolean;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Page: React.FC<IPageProps> = ({ title, children, isEmpty, className }) => {\n  const { i18n } = useTranslation();\n\n  return (\n    <>\n      <Helmet>\n        <html lang={i18n.language} />\n        <meta charSet='utf-8' />\n        <title>{title}</title>\n      </Helmet>\n      {!isEmpty && <Header />}\n      <main\n        className={className}\n      //style={{ minHeight: '95vh', }} \n      >\n        {children}\n      </main>\n      {!isEmpty && <Footer />}\n      <ScrollToTop />\n    </>\n  );\n};\n\nexport default Page;\n","import React from 'react';\nimport NumberFormat from 'react-number-format';\n\n\n\n\ninterface INumberFormat {\n  value?: string | number | null;\n  suffix?: string;\n  decimalScale?: number;\n  fixedDecimalScale?: boolean;\n  prefix?: string;\n  allowLeadingZeros?: boolean;\n  style?: any;\n}\n\nfunction Number(props: INumberFormat) {\n  const { ...rest } = props;\n\n  return (\n    <NumberFormat\n      displayType={'text'}\n      defaultValue={0}\n      thousandSeparator={true}\n      {...rest}\n    />\n  );\n}\n\nexport default Number;\n","import React, { useState, useEffect, useCallback, } from \"react\";\nimport { hot } from 'react-hot-loader';\nimport { useSelector } from 'react-redux';\nimport Number from '../../components/Number';\nimport { useTranslation } from 'react-i18next';\nimport { Header, Container, Button, Table } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport { getAdaptiveClassName, mobileBreakpoint } from \"../../helpers/Media\";\nimport Page from \"../../components/Page\";\nimport ReferralLink from \"./components/ReferralLink/ReferralLink\";\nimport * as S from '../../store/selectors';\nimport { api } from '../../store/configureStore';\nimport \"./MyReferrals.scss\";\n\n\n\n\ninterface IFarmingStatistics {\n  guid: any,\n  address: any,\n\n  level: any,\n  nfts: any,\n  staked: any,\n  stakedUsd: any,\n\n  balance: any,\n\n  poolRef: {\n    earned: any,\n    earnedToday: any,\n    referrals: any,\n  },\n\n  poolTime: {\n    days: any,\n    earned: any,\n    earnedToday: any,\n  },\n\n  poolTeam: {\n    earned: any,\n    earnedToday: any,\n    members: any,\n    weakTeam: any,\n  },\n\n  poolPersonal: {\n    earned: any,\n    earnedToday: any,\n  },\n}\n\nconst farmingStatisticsInitData = {\n  guid: -1,\n  address: '',\n\n  level: 'STARTER',\n  nfts: 0,\n  staked: '0.000000000000000000',\n  stakedUsd: '0.000000000000000000',\n\n  balance: '0.000000000000000000',\n\n  poolRef: {\n    earned: '0.000000000000000000',\n    earnedToday: '0.000000000000000000',\n    referrals: 0,\n  },\n\n  poolTime: {\n    days: 0,\n    earned: '0.000000000000000000',\n    earnedToday: '0.000000000000000000',\n  },\n\n  poolTeam: {\n    earned: '0.000000000000000000',\n    earnedToday: '0.000000000000000000',\n    members: 0,\n    weakTeam: '',\n  },\n\n  poolPersonal: {\n    earned: '0.000000000000000000',\n    earnedToday: '0.000000000000000000',\n  },\n};\n\nconst MyReferrals: React.FC<any> = () => {\n  const myGuid = useSelector((state) => S.profile.getGuid(state));\n\n  const isMobile = useMediaPredicate(mobileBreakpoint);\n  const { t } = useTranslation();\n\n\n\n  const [fStats, setFStats] = useState<IFarmingStatistics>(farmingStatisticsInitData);\n  const updateFStats = async () => {\n    try {\n      const res = await api.getV2AllData();\n      if (res.ok) {\n        setFStats(res.result);\n      } else {\n        setFStats(farmingStatisticsInitData);\n      }\n    } catch (error) {\n      setFStats(farmingStatisticsInitData);\n    }\n  }\n\n  const claimCclp = async () => {\n    try {\n      const res = await api.getV2ClaimCclp();\n      if (res.ok) {\n        alert('Done');\n      } else {\n        alert(res.error.message);\n      }\n    } catch (error) {\n      alert(error);\n    }\n  }\n\n  const update = () => {\n    updateFStats();\n  }\n\n  useEffect(() => {\n    update();\n  }, []);\n\n\n  return (\n    <Page title={t('Referral program')}>\n      <div className={getAdaptiveClassName(\"referrals__header\", isMobile)}>\n        <Container>\n          <ReferralLink />\n          <Header as=\"h1\" content={t('Referral program')} className=\"shadow\" style={{ color: '#ffae00' }} />\n          <p>\n            {t('We introduce a unique farming model where only you chooce whether to stake alone or with a team')}\n          </p>\n        </Container>\n      </div>\n\n      <div className={getAdaptiveClassName(\"referrals\", isMobile)}>\n        <Container>\n          <div className=\"referrals__menu\">\n            <Link to={\"/my/referrals\"}>{t('My statistics')}</Link>\n            <Link to={\"/my/referrals/tree\"}>{t('My referral tree')}</Link>\n          </div>\n\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan='2'>My personal farming statistics  <Button onClick={updateFStats} content='Update' size='mini' color='green' /></Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>Staked in USD</Table.Cell>\n                <Table.Cell><Number value={fStats.stakedUsd} suffix=' USD' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Staked CCLP-LP</Table.Cell>\n                <Table.Cell><Number value={fStats.staked} suffix=' CCLP-LP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>NFT</Table.Cell>\n                <Table.Cell><Number value={fStats.nfts} decimalScale={0} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Referral level</Table.Cell>\n                <Table.Cell>{fStats.level}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Balance</Table.Cell>\n                <Table.Cell><Number value={fStats.balance} suffix=' CCLP' decimalScale={2} /> <Button onClick={claimCclp} content='Claim' size='mini' color='green' /></Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n\n\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan='2'>Total farmed</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>Primary pool</Table.Cell>\n                <Table.Cell><Number value={fStats.poolPersonal.earned} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Bonus pool</Table.Cell>\n                <Table.Cell><Number value={fStats.poolTime.earned} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Team farming</Table.Cell>\n                <Table.Cell><Number value={fStats.poolTeam.earned} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Team members</Table.Cell>\n                <Table.Cell><Number value={fStats.poolTeam.members} decimalScale={0} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Referral farming</Table.Cell>\n                <Table.Cell><Number value={fStats.poolRef.earned} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Direct referrals</Table.Cell>\n                <Table.Cell><Number value={fStats.poolRef.referrals} decimalScale={0} /></Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n\n\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan='2'>My next rewards</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>Bonus pool</Table.Cell>\n                <Table.Cell><Number value={fStats.poolTime.earnedToday} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Team farming</Table.Cell>\n                <Table.Cell><Number value={fStats.poolTeam.earnedToday} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>Referral farming</Table.Cell>\n                <Table.Cell><Number value={fStats.poolRef.earnedToday} suffix=' CCLP' decimalScale={2} /></Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n        </Container>\n      </div>\n    </Page >\n  );\n};\n\n\nexport default hot(module)(MyReferrals);\n"],"sourceRoot":""}